// <auto-generated />
using System;
using GardenMarket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GardenMarket.Data.Migrations
{
    [DbContext(typeof(GardenMarketDbContext))]
    [Migration("20190718072452_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GardenMarket.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GardenMarket.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ProductId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GardenMarket.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Растения"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Градина"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Свободно Време"
                        });
                });

            modelBuilder.Entity("GardenMarket.Models.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Display");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Display = true,
                            Name = "Цвят"
                        },
                        new
                        {
                            Id = 2,
                            Display = true,
                            Name = "Сезони"
                        },
                        new
                        {
                            Id = 3,
                            Display = true,
                            Name = "Произведено в"
                        },
                        new
                        {
                            Id = 4,
                            Display = false,
                            Name = "Размер"
                        });
                });

            modelBuilder.Entity("GardenMarket.Models.CharacteristicCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacteristicId");

                    b.Property<int>("SubCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("CharacteristicCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CharacteristicId = 2,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CharacteristicId = 4,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            CharacteristicId = 2,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            CharacteristicId = 2,
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 6,
                            CharacteristicId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 7,
                            CharacteristicId = 3,
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 8,
                            CharacteristicId = 1,
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 9,
                            CharacteristicId = 1,
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 10,
                            CharacteristicId = 3,
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 11,
                            CharacteristicId = 1,
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 12,
                            CharacteristicId = 3,
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 13,
                            CharacteristicId = 3,
                            SubCategoryId = 11
                        });
                });

            modelBuilder.Entity("GardenMarket.Models.CharacteristicType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacteristicId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("CharacteristicTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicId = 1,
                            Name = "Бял"
                        },
                        new
                        {
                            Id = 2,
                            CharacteristicId = 1,
                            Name = "Сив"
                        },
                        new
                        {
                            Id = 3,
                            CharacteristicId = 1,
                            Name = "Черен"
                        },
                        new
                        {
                            Id = 4,
                            CharacteristicId = 1,
                            Name = "Син"
                        },
                        new
                        {
                            Id = 5,
                            CharacteristicId = 1,
                            Name = "Червен"
                        },
                        new
                        {
                            Id = 6,
                            CharacteristicId = 1,
                            Name = "Жълт"
                        },
                        new
                        {
                            Id = 7,
                            CharacteristicId = 1,
                            Name = "Оранжев"
                        },
                        new
                        {
                            Id = 8,
                            CharacteristicId = 1,
                            Name = "Кафяв"
                        },
                        new
                        {
                            Id = 9,
                            CharacteristicId = 1,
                            Name = "Зелен"
                        },
                        new
                        {
                            Id = 10,
                            CharacteristicId = 1,
                            Name = "Лилав"
                        },
                        new
                        {
                            Id = 11,
                            CharacteristicId = 2,
                            Name = "Пролет"
                        },
                        new
                        {
                            Id = 12,
                            CharacteristicId = 2,
                            Name = "Лято"
                        },
                        new
                        {
                            Id = 13,
                            CharacteristicId = 2,
                            Name = "Есен"
                        },
                        new
                        {
                            Id = 14,
                            CharacteristicId = 2,
                            Name = "Зима"
                        },
                        new
                        {
                            Id = 15,
                            CharacteristicId = 2,
                            Name = "Целогодишно"
                        },
                        new
                        {
                            Id = 16,
                            CharacteristicId = 3,
                            Name = "България"
                        },
                        new
                        {
                            Id = 17,
                            CharacteristicId = 3,
                            Name = "САЩ"
                        },
                        new
                        {
                            Id = 18,
                            CharacteristicId = 3,
                            Name = "Блала"
                        },
                        new
                        {
                            Id = 19,
                            CharacteristicId = 3,
                            Name = "Китай"
                        });
                });

            modelBuilder.Entity("GardenMarket.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<DateTime>("Posted");

                    b.Property<int>("ProductId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GardenMarket.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLicked");

                    b.Property<int>("ProductId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("GardenMarket.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description");

                    b.Property<TimeSpan?>("DiscountEnd");

                    b.Property<DateTime?>("DiscountStart");

                    b.Property<bool>("HasDiscount");

                    b.Property<int>("InStock");

                    b.Property<string>("Name");

                    b.Property<int?>("PrecentDiscount");

                    b.Property<decimal>("Price");

                    b.Property<int?>("PromotionId");

                    b.Property<int>("Sales");

                    b.Property<int>("SubSubCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubSubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GardenMarket.Models.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("GardenMarket.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("GardenMarket.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacteristicTypeId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("GardenMarket.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CratedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("ImagePath");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("PromotionStart");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("GardenMarket.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ImagePath = "img/product-img/product1-1.jpg",
                            Name = "Стайни растения"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ImagePath = "img/product-img/product1-1.jpg",
                            Name = "Външни растения"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ImagePath = "img/product-img/product1-1.jpg",
                            Name = "Сенколюбиви растения"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ImagePath = "img/product-img/product1-1.jpg",
                            Name = "Разсад"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ImagePath = "img/product-img/product2-1.jpg",
                            Name = "Торове"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ImagePath = "img/product-img/product2-1.jpg",
                            Name = "Саксии"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            ImagePath = "img/product-img/product2-1.jpg",
                            Name = "Напояване"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ImagePath = "img/product-img/product2-1.jpg",
                            Name = "Градински декорации"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ImagePath = "img/product-img/product3-1.jpg",
                            Name = "Къмпинг"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            ImagePath = "img/product-img/product3-1.jpg",
                            Name = "Барбекю"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            ImagePath = "img/product-img/product3-1.jpg",
                            Name = "Осветление"
                        });
                });

            modelBuilder.Entity("GardenMarket.Models.SubSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("HighestPrice");

                    b.Property<float>("LowestPrice");

                    b.Property<string>("Name");

                    b.Property<int>("SubCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HighestPrice = 62.99f,
                            LowestPrice = 1.99f,
                            Name = "Цъфтящи растения",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Нецъфтящи растения",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Насекомоядни растения",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Сукуленти",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Вечнозелени храсти и дръвчета",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Цъфтящи храсти и дръвчета",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Водни растения",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Бегония",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Здравец",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Циганче",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 11,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Функия",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 12,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Семена",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 13,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Луковици",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 14,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Торове",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 15,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Почви",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 16,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Тревни смески",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 17,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Саксии",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 18,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Вази",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 19,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Кашпи",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 20,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Сандъци",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 21,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Цветарници",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 22,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Лейки",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 23,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Пулверизатори",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 24,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Декоративни фигурки",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 25,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Декоративни камъни",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 26,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Палатки",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 27,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Спални чували",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 28,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Къмпинг оборудване",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 29,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Столове и маси",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 30,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Грил",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 31,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Скара",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 32,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Оборудване за барбекю",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 33,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Соларни лампи",
                            SubCategoryId = 11
                        },
                        new
                        {
                            Id = 34,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Фенери",
                            SubCategoryId = 11
                        },
                        new
                        {
                            Id = 35,
                            HighestPrice = 0f,
                            LowestPrice = 0f,
                            Name = "Сфери",
                            SubCategoryId = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GardenMarket.Models.Cart", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GardenMarket.Models.CharacteristicCategory", b =>
                {
                    b.HasOne("GardenMarket.Models.Characteristic", "Characteristic")
                        .WithMany("CharacteristicCategories")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.CharacteristicType", b =>
                {
                    b.HasOne("GardenMarket.Models.Characteristic", "Characteristic")
                        .WithMany("CharacteristicTypes")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.Comment", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GardenMarket.Models.Favorite", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GardenMarket.Models.Product", b =>
                {
                    b.HasOne("GardenMarket.Models.SubSubCategory", "SubSubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GardenMarket.Models.ProductColor", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.ProductImage", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.ProductType", b =>
                {
                    b.HasOne("GardenMarket.Models.CharacteristicType", "CharacteristicType")
                        .WithMany()
                        .HasForeignKey("CharacteristicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithMany("Types")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.Promotion", b =>
                {
                    b.HasOne("GardenMarket.Models.Product", "Product")
                        .WithOne("Promotion")
                        .HasForeignKey("GardenMarket.Models.Promotion", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser", "User")
                        .WithMany("Promotions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GardenMarket.Models.SubCategory", b =>
                {
                    b.HasOne("GardenMarket.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GardenMarket.Models.SubSubCategory", b =>
                {
                    b.HasOne("GardenMarket.Models.SubCategory", "SubCategory")
                        .WithMany("SubSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GardenMarket.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GardenMarket.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GardenMarket.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GardenMarket.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
